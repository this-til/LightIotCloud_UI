scalar DateTime
@specifiedBy(url:
"https://scalars.graphql.org/andimarek/date-time.html"
)

scalar Bytes

schema {
    query:  Query
    mutation: Mutation
    subscription: Subscription
}


# -----------------------Com-----------------------

type Result {
    resultType : ResultType
    message: String
}

enum ResultType {
    SUCCESSFUL
    FAIL
    ERROR
}

input Page {
    current : Int
    size : Int
    total : Int
    searchCount : Int
}

input TimeRange {
    start : DateTime
    end : DateTime
}

enum DeviceType {
    CAR
    LIGHT
}

enum OnlineState {
    ONLINE
    OFFLINE
}

type MatPack {
    width : Int
    height : Int
    channels : Int

    image : Bytes
}

input MatInput {
    width : Int
    height : Int
    channels : Int

    image : Bytes
}

# -----------------------Com-----------------------

# -----------------------Query-----------------------

type Query {

    self : User!

    lightSelf : Light!

    carSelf : Car!
}

type User {

    id : ID!
    username : String!
    userType : UserType!
    createdAt : DateTime!
    updatedAt : DateTime!
    phone : String
    email : String

    lights : [Light!]!
    cars : [Car!]!

    getLightByName(name : String) : Light
    getCarByName(name : String) : Car

    getLightById(id : ID) : Light
    getCarById(id : ID) : Car

    model: [DetectionModel]

}

enum UserType {
    administrators, user, device
}

type Light {

    id : ID!
    userId : ID!
    name : String!
    createdAt : DateTime!
    updatedAt : DateTime!

    online : Boolean

    # 离线时为 null
    lightState : LightState

    datas(timeRange : TimeRange) : [LightData!]!
    detectionKeyframes(page : Page, timeRange : TimeRange) : [DetectionKeyframe!]!
}

type LightData {
    id : ID!
    lightId : ID!

    time : DateTime!

    humidity : Float
    temperature : Float
    pm10 : Float
    pm2_5 : Float
    illumination : Float
    windSpeed : Float
    windDirection : Float
}

type LightState {
    enableWirelessCharging : Boolean
    wirelessChargingPower : Float
}

type DetectionKeyframe {
    id : ID!
    lightId : ID!
    time : DateTime!
    url : String!

    detections : [Detection!]!
}

type Detection {
    id : ID!
    keyframeId : ID!
    itemId : ID!
    x : Float!
    y : Float!
    w : Float!
    h : Float!
    probability : Float!

    model : String
    item : String

}

type Car {
    id : ID!
    userId : ID!
    name : String!
    createdAt : DateTime!
    updatedAt : DateTime!

    online : Boolean

    # 离线时为 null
    carState : CarState
}

type CarState {
    TODO : ID
}

type DetectionModel {
    name : String!

    items : [DetectionItem]
}

type DetectionItem {
    name : String!
}

input DetectionKeyframesFilter {
    page : Page
    timeRange : TimeRange

    models : [ModelSelect]
}

input ModelSelect {
    id : Int!
    itemIds : [Int]
}

# -----------------------Query-----------------------

# -----------------------Mutation-----------------------

type Mutation {

    # no jwt
    login (username : String!, password :String!) : String!

    # no jwt
    register (username : String! , password :String!) : Boolean

    #用来判定JWT令牌是不是有效的
    jwtEffective(jwt : String) : Boolean!

    self : UserMutation!
    lightSelf : LightMutation!
    carSelf : CarMutation!

}

type UserMutation {
    lights : [LightMutation!]!
    cars : [CarMutation!]!

    getLightByName(name : String) : LightMutation
    getCarByName(name : String) : CarMutation

    getLightById(id : ID) : LightMutation
    getCarById(id : ID) : CarMutation

    existLight(name : String!) : LightMutation!
    existCar(name : String!) : CarMutation!
}

type LightMutation {
    reportUpdate(lightDataInput : LightDataInput) : Result
    reportState(lightState : LightStateInput) : Result
    reportDetection(detectionInput : DetectionInput) : Result

    setConfiguration(key : String, value : String) : Result

    # 设置亮度
    setGear(value : Int) : Result

    # 设置自动亮度调节
    setAutomaticGear(value : Boolean) : Result
}

# noinspection GraphQLUnresolvedReference,GraphQLMissingType
input DetectionInput  {
    items : [DetectionItemInput]
    image : Upload
}

input DetectionItemInput {
    model : String!
    item : String!
    x : Float!
    y : Float!
    w : Float!
    h : Float!
    probability : Float!
}

input LightStateInput {
    enableWirelessCharging : Boolean
    wirelessChargingPower : Float
}

input LightDataInput  {
    humidity : Float
    temperature : Float
    pm10 : Float
    pm2_5 : Float
    illumination : Float
    windSpeed : Float
    windDirection : Float
}

type CarMutation {

    reportState(carState : LightStateInput) : Result

    setConfiguration(key : String, value : String) : Result

    operationCar(operationCarInput : OperationCarInput) : Result
}

input OperationCarInput {
    translationAdvance : Boolean
    translationLeft : Boolean
    translationRetreat : Boolean
    translationRight : Boolean
    angularLeft : Boolean
    angularRight : Boolean
    stop : Boolean
}

# -----------------------Mutation-----------------------

# -----------------------Subscription-----------------------

#设备使用
type Subscription {

    updateConfigurationEvent : UpdateConfigurationEvent

    # light


    # car
    operationCarEvent : OperationCarEvent
}

# web
extend type Subscription {

    testSubscription : Int

    deviceOnlineStateSwitchEvent : DeviceOnlineStateSwitchEvent

    lightStateReportEvent(lightId : Int) : LightState
    lightDataReportEvent(lightId : Int) : LightData

    carStateReportEvent(carId : Int) : CarState
}

type UpdateConfigurationEvent {
    key : String!
    value : String!
}

type OperationCarEvent {
    translationAdvance : Boolean
    translationLeft : Boolean
    translationRetreat : Boolean
    translationRight : Boolean
    angularLeft : Boolean
    angularRight : Boolean
    stop : Boolean
}

type DeviceOnlineStateSwitchEvent {

    onlineState : OnlineState!
    deviceType : DeviceType!
    deviceId : ID!

    # 如果作为灯则非空
    light: Light

    # 如果作为车则非空
    car : Car

    deviceName : String
}



# -----------------------Subscription-----------------------


